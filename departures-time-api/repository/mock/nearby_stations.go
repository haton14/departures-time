// Code generated by MockGen. DO NOT EDIT.
// Source: repository/nearby_stations.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/haton14/departures-time/departures-time-api/domain/model"
	vo "github.com/haton14/departures-time/departures-time-api/domain/vo"
)

// MockNearbyStations is a mock of NearbyStations interface.
type MockNearbyStations struct {
	ctrl     *gomock.Controller
	recorder *MockNearbyStationsMockRecorder
}

// MockNearbyStationsMockRecorder is the mock recorder for MockNearbyStations.
type MockNearbyStationsMockRecorder struct {
	mock *MockNearbyStations
}

// NewMockNearbyStations creates a new mock instance.
func NewMockNearbyStations(ctrl *gomock.Controller) *MockNearbyStations {
	mock := &MockNearbyStations{ctrl: ctrl}
	mock.recorder = &MockNearbyStationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNearbyStations) EXPECT() *MockNearbyStationsMockRecorder {
	return m.recorder
}

// GetByLongitudeAndLatitudeAndDistance mocks base method.
func (m *MockNearbyStations) GetByLongitudeAndLatitudeAndDistance(lo vo.Longitude, la vo.Latitude, distance vo.Distance) ([]model.NearbyStation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLongitudeAndLatitudeAndDistance", lo, la, distance)
	ret0, _ := ret[0].([]model.NearbyStation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLongitudeAndLatitudeAndDistance indicates an expected call of GetByLongitudeAndLatitudeAndDistance.
func (mr *MockNearbyStationsMockRecorder) GetByLongitudeAndLatitudeAndDistance(lo, la, distance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLongitudeAndLatitudeAndDistance", reflect.TypeOf((*MockNearbyStations)(nil).GetByLongitudeAndLatitudeAndDistance), lo, la, distance)
}
