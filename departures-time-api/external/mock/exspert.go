// Code generated by MockGen. DO NOT EDIT.
// Source: external/exspert.go

// Package mock_external is a generated GoMock package.
package mock_external

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	vo "github.com/haton14/departures-time/departures-time-api/domain/vo"
	external "github.com/haton14/departures-time/departures-time-api/external"
)

// MockExspert is a mock of Exspert interface.
type MockExspert struct {
	ctrl     *gomock.Controller
	recorder *MockExspertMockRecorder
}

// MockExspertMockRecorder is the mock recorder for MockExspert.
type MockExspertMockRecorder struct {
	mock *MockExspert
}

// NewMockExspert creates a new mock instance.
func NewMockExspert(ctrl *gomock.Controller) *MockExspert {
	mock := &MockExspert{ctrl: ctrl}
	mock.recorder = &MockExspertMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExspert) EXPECT() *MockExspertMockRecorder {
	return m.recorder
}

// GetByName mocks base method.
func (m *MockExspert) GetByName(name vo.StationName) ([]external.ExspertDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", name)
	ret0, _ := ret[0].([]external.ExspertDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockExspertMockRecorder) GetByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockExspert)(nil).GetByName), name)
}

// GetRoutingURL mocks base method.
func (m *MockExspert) GetRoutingURL(from, to external.StationCode) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoutingURL", from, to)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoutingURL indicates an expected call of GetRoutingURL.
func (mr *MockExspertMockRecorder) GetRoutingURL(from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutingURL", reflect.TypeOf((*MockExspert)(nil).GetRoutingURL), from, to)
}
