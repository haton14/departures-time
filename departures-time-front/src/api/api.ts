/* tslint:disable */
/* eslint-disable */
/**
 * departures-time
 * 現在地から最寄駅を取得し、目的地駅を名前から決めて経路検索を行うAPI
 *
 * The version of the OpenAPI document: 1.0
 * Contact: iioka.takumi.quena@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type{ Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 目的地駅
 * @export
 * @interface Destination
 */
export interface Destination {
    /**
     * 駅すぱあとWebサービスの駅コード
     * @type {string}
     * @memberof Destination
     */
    'code': string;
    /**
     * 駅名
     * @type {string}
     * @memberof Destination
     */
    'name': string;
}
/**
 * 目的地駅一覧取得のレスポンス
 * @export
 * @interface DestinationsGet
 */
export interface DestinationsGet {
    /**
     *
     * @type {Array<Destination>}
     * @memberof DestinationsGet
     */
    'stations': Array<Destination>;
}
/**
 * エラー時のレスポンス形式
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     *
     * @type {string}
     * @memberof ErrorResponse
     */
    'message': string;
}
/**
 * 最寄駅
 * @export
 * @interface NearByStation
 */
export interface NearByStation {
    /**
     * 駅すぱあとWebサービスの駅コード
     * @type {string}
     * @memberof NearByStation
     */
    'code': string;
    /**
     * 駅名
     * @type {string}
     * @memberof NearByStation
     */
    'name': string;
    /**
     * 現在地から最寄駅の距離
     * @type {number}
     * @memberof NearByStation
     */
    'distance'?: number;
}
/**
 * 最寄駅一覧取得のレスポンス
 * @export
 * @interface NearByStationsGet
 */
export interface NearByStationsGet {
    /**
     *
     * @type {Array<NearByStation>}
     * @memberof NearByStationsGet
     */
    'stations': Array<NearByStation>;
}
/**
 * 経路検索結果のレスポンス
 * @export
 * @interface RoutesGet
 */
export interface RoutesGet {
    /**
     *
     * @type {string}
     * @memberof RoutesGet
     */
    'url': string;
}

/**
 * StationApi - axios parameter creator
 * @export
 */
export const StationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 指定した名前で候補駅が見つかれば結果を返す
         * @summary 目的地駅一覧
         * @param {string} name 駅名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Destinations: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getV1Destinations', 'name', name)
            const localVarPath = `/v1/destinations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 最大20件まで返す
         * @summary 最寄駅一覧
         * @param {number} longitude 経度
         * @param {number} latitude 緯度
         * @param {number} [distance] 現在地から最寄駅までの距離
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1NearbyStations: async (longitude: number, latitude: number, distance?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'longitude' is not null or undefined
            assertParamExists('getV1NearbyStations', 'longitude', longitude)
            // verify required parameter 'latitude' is not null or undefined
            assertParamExists('getV1NearbyStations', 'latitude', latitude)
            const localVarPath = `/v1/nearby-stations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (distance !== undefined) {
                localVarQueryParameter['distance'] = distance;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 駅すぱあとの駅コードを指定して、探索結果を表示するURLを返す
         * @summary 経路検索結果URL
         * @param {string} from 出発駅:駅すぱあとWebサービスの駅コード
         * @param {string} to 目的駅:駅すぱあとWebサービスの駅コード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Routes: async (from: string, to: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            assertParamExists('getV1Routes', 'from', from)
            // verify required parameter 'to' is not null or undefined
            assertParamExists('getV1Routes', 'to', to)
            const localVarPath = `/v1/routes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StationApi - functional programming interface
 * @export
 */
export const StationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StationApiAxiosParamCreator(configuration)
    return {
        /**
         * 指定した名前で候補駅が見つかれば結果を返す
         * @summary 目的地駅一覧
         * @param {string} name 駅名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1Destinations(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DestinationsGet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1Destinations(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 最大20件まで返す
         * @summary 最寄駅一覧
         * @param {number} longitude 経度
         * @param {number} latitude 緯度
         * @param {number} [distance] 現在地から最寄駅までの距離
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1NearbyStations(longitude: number, latitude: number, distance?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NearByStationsGet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1NearbyStations(longitude, latitude, distance, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 駅すぱあとの駅コードを指定して、探索結果を表示するURLを返す
         * @summary 経路検索結果URL
         * @param {string} from 出発駅:駅すぱあとWebサービスの駅コード
         * @param {string} to 目的駅:駅すぱあとWebサービスの駅コード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1Routes(from: string, to: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoutesGet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1Routes(from, to, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StationApi - factory interface
 * @export
 */
export const StationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StationApiFp(configuration)
    return {
        /**
         * 指定した名前で候補駅が見つかれば結果を返す
         * @summary 目的地駅一覧
         * @param {string} name 駅名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Destinations(name: string, options?: any): AxiosPromise<DestinationsGet> {
            return localVarFp.getV1Destinations(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 最大20件まで返す
         * @summary 最寄駅一覧
         * @param {number} longitude 経度
         * @param {number} latitude 緯度
         * @param {number} [distance] 現在地から最寄駅までの距離
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1NearbyStations(longitude: number, latitude: number, distance?: number, options?: any): AxiosPromise<NearByStationsGet> {
            return localVarFp.getV1NearbyStations(longitude, latitude, distance, options).then((request) => request(axios, basePath));
        },
        /**
         * 駅すぱあとの駅コードを指定して、探索結果を表示するURLを返す
         * @summary 経路検索結果URL
         * @param {string} from 出発駅:駅すぱあとWebサービスの駅コード
         * @param {string} to 目的駅:駅すぱあとWebサービスの駅コード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Routes(from: string, to: string, options?: any): AxiosPromise<RoutesGet> {
            return localVarFp.getV1Routes(from, to, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StationApi - object-oriented interface
 * @export
 * @class StationApi
 * @extends {BaseAPI}
 */
export class StationApi extends BaseAPI {
    /**
     * 指定した名前で候補駅が見つかれば結果を返す
     * @summary 目的地駅一覧
     * @param {string} name 駅名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationApi
     */
    public getV1Destinations(name: string, options?: AxiosRequestConfig) {
        return StationApiFp(this.configuration).getV1Destinations(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 最大20件まで返す
     * @summary 最寄駅一覧
     * @param {number} longitude 経度
     * @param {number} latitude 緯度
     * @param {number} [distance] 現在地から最寄駅までの距離
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationApi
     */
    public getV1NearbyStations(longitude: number, latitude: number, distance?: number, options?: AxiosRequestConfig) {
        return StationApiFp(this.configuration).getV1NearbyStations(longitude, latitude, distance, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 駅すぱあとの駅コードを指定して、探索結果を表示するURLを返す
     * @summary 経路検索結果URL
     * @param {string} from 出発駅:駅すぱあとWebサービスの駅コード
     * @param {string} to 目的駅:駅すぱあとWebサービスの駅コード
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationApi
     */
    public getV1Routes(from: string, to: string, options?: AxiosRequestConfig) {
        return StationApiFp(this.configuration).getV1Routes(from, to, options).then((request) => request(this.axios, this.basePath));
    }
}


